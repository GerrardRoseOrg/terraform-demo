Pre-reqs:
* AWS accounts: Tooling, Development, Production with SSO access enabled

Tooling account:
1. Login to Tooling account.

2. Open CloudShell

3. Identify user ID:
aws sts get-caller-identity --query "Arn" --output text
arn:aws:sts::430118818988:assumed-role/AWSReservedSSO_AdministratorAccess_650d32e92034d1b7/gerrard.rose.org11

4. Capture the user ARN to be used in the Development/Production steps.


Development account:
1. Login to Development account.

2. Open CloudShell

3. Update the following environment variables with your values:
export ROLE_NAME=terraform-demo-role
export SSO_ROLE_ARN="arn:aws:sts::430118818988:assumed-role/AWSReservedSSO_AdministratorAccess_650d32e92034d1b7/gerrard.rose.org11"

4. Create the IAM role: (copy and execute all lines below)
aws iam create-role --role-name $ROLE_NAME --assume-role-policy-document '{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "AWS": "'$SSO_ROLE_ARN'"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}' --query "Role.Arn" --output text && \
aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/AdministratorAccess

5. Create the key pair: (copy and execute all lines below)
aws ec2 create-key-pair --region eu-west-1 --key-name terraform-demo-dev-key-pair --query 'KeyMaterial' --output text > private-key.pem
aws ssm put-parameter --region eu-west-1 --name "/ec2/keypairs/terraform-demo-dev-key-pair" --type "SecureString" --overwrite --value "$(cat private-key.pem)"
rm private-key.pem


Production account:
1. Login to Production account.

2. Open CloudShell

3. Update the following environment variables with your values:
export ROLE_NAME=terraform-demo-role
export SSO_ROLE_ARN="arn:aws:sts::430118818988:assumed-role/AWSReservedSSO_AdministratorAccess_650d32e92034d1b7/gerrard.rose.org11"

4. Create the IAM role: (copy and execute all lines below)
aws iam create-role --role-name $ROLE_NAME --assume-role-policy-document '{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "AWS": "'$SSO_ROLE_ARN'"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}' --query "Role.Arn" --output text && \
aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/AdministratorAccess

5. Create the key pair: (copy and execute all lines below)
aws ec2 create-key-pair --region eu-west-2 --key-name terraform-demo-prod-key-pair --query 'KeyMaterial' --output text > private-key.pem
aws ssm put-parameter --region eu-west-2 --name "/ec2/keypairs/terraform-demo-prod-key-pair" --type "SecureString" --overwrite --value "$(cat private-key.pem)"
rm private-key.pem

Tooling account:
1. Login to Tooling account.

2. Open CloudShell

3. Update the following environment variables with your values:
export BUCKET_NAME=gerrard.rose.org11.tooling-terraform-demo-terraform-state
export REGION=eu-west-2
export TABLE_NAME=terraform-demo-terraform-state-lock

4. Create the S3 bucket: (copy and execute all lines below)
aws s3api create-bucket --bucket $BUCKET_NAME --region $REGION --create-bucket-configuration LocationConstraint=$REGION && \
aws s3api put-public-access-block --bucket $BUCKET_NAME --public-access-block-configuration \
    "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true" && \
aws s3api put-bucket-encryption --bucket $BUCKET_NAME --server-side-encryption-configuration '{
    "Rules": [{
        "ApplyServerSideEncryptionByDefault": {
            "SSEAlgorithm": "AES256"
        }
    }]
}'

5. Create the DynamoDB table: (copy and execute all lines below)
aws dynamodb create-table --table-name $TABLE_NAME --attribute-definitions AttributeName=LockID,AttributeType=S --key-schema AttributeName=LockID,KeyType=HASH --billing-mode PAY_PER_REQUEST   && \
aws dynamodb wait table-exists --table-name $TABLE_NAME

